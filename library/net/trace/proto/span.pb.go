// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: library/net/trace/proto/span.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		library/net/trace/proto/span.proto

	It has these top-level messages:
		Tag
		Log
		Span
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Tag_Kind int32

const (
	Tag_STRING Tag_Kind = 0
	Tag_INT    Tag_Kind = 1
	Tag_BOOL   Tag_Kind = 2
	Tag_FLOAT  Tag_Kind = 3
)

var Tag_Kind_name = map[int32]string{
	0: "STRING",
	1: "INT",
	2: "BOOL",
	3: "FLOAT",
}
var Tag_Kind_value = map[string]int32{
	"STRING": 0,
	"INT":    1,
	"BOOL":   2,
	"FLOAT":  3,
}

func (x Tag_Kind) String() string {
	return proto1.EnumName(Tag_Kind_name, int32(x))
}
func (Tag_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorSpan, []int{0, 0} }

type Log_Kind int32

const (
	Log_STRING Log_Kind = 0
	Log_INT    Log_Kind = 1
	Log_BOOL   Log_Kind = 2
	Log_FLOAT  Log_Kind = 3
)

var Log_Kind_name = map[int32]string{
	0: "STRING",
	1: "INT",
	2: "BOOL",
	3: "FLOAT",
}
var Log_Kind_value = map[string]int32{
	"STRING": 0,
	"INT":    1,
	"BOOL":   2,
	"FLOAT":  3,
}

func (x Log_Kind) String() string {
	return proto1.EnumName(Log_Kind_name, int32(x))
}
func (Log_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorSpan, []int{1, 0} }

type Tag struct {
	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Kind  Tag_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=dapper.trace.Tag_Kind" json:"kind,omitempty"`
	Value []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{0} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetKind() Tag_Kind {
	if m != nil {
		return m.Kind
	}
	return Tag_STRING
}

func (m *Tag) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Log struct {
	Key       string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Kind      Log_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=dapper.trace.Log_Kind" json:"kind,omitempty"`
	Value     []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto1.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{1} }

func (m *Log) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Log) GetKind() Log_Kind {
	if m != nil {
		return m.Kind
	}
	return Log_STRING
}

func (m *Log) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Log) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Span struct {
	Family       string  `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Title        string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Caller       string  `protobuf:"bytes,3,opt,name=caller,proto3" json:"caller,omitempty"`
	TraceId      uint64  `protobuf:"varint,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId       uint64  `protobuf:"varint,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId uint64  `protobuf:"varint,6,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Level        int32   `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	StartAt      int64   `protobuf:"varint,8,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	FinishAt     int64   `protobuf:"varint,9,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty"`
	Sample       float32 `protobuf:"fixed32,10,opt,name=sample,proto3" json:"sample,omitempty"`
	Tags         []*Tag  `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Logs         []*Log  `protobuf:"bytes,12,rep,name=logs" json:"logs,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto1.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorSpan, []int{2} }

func (m *Span) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Span) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Span) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *Span) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *Span) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *Span) GetParentSpanId() uint64 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *Span) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Span) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *Span) GetFinishAt() int64 {
	if m != nil {
		return m.FinishAt
	}
	return 0
}

func (m *Span) GetSample() float32 {
	if m != nil {
		return m.Sample
	}
	return 0
}

func (m *Span) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Span) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto1.RegisterType((*Tag)(nil), "dapper.trace.Tag")
	proto1.RegisterType((*Log)(nil), "dapper.trace.Log")
	proto1.RegisterType((*Span)(nil), "dapper.trace.Span")
	proto1.RegisterEnum("dapper.trace.Tag_Kind", Tag_Kind_name, Tag_Kind_value)
	proto1.RegisterEnum("dapper.trace.Log_Kind", Log_Kind_name, Log_Kind_value)
}
func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Kind))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Kind))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Family) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Caller) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Caller)))
		i += copy(dAtA[i:], m.Caller)
	}
	if m.TraceId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.TraceId))
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.SpanId))
	}
	if m.ParentSpanId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.ParentSpanId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.Level))
	}
	if m.StartAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.StartAt))
	}
	if m.FinishAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSpan(dAtA, i, uint64(m.FinishAt))
	}
	if m.Sample != 0 {
		dAtA[i] = 0x55
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Sample))))
		i += 4
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x62
			i++
			i = encodeVarintSpan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSpan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovSpan(uint64(m.Kind))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func (m *Log) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovSpan(uint64(m.Kind))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSpan(uint64(m.Timestamp))
	}
	return n
}

func (m *Span) Size() (n int) {
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.TraceId != 0 {
		n += 1 + sovSpan(uint64(m.TraceId))
	}
	if m.SpanId != 0 {
		n += 1 + sovSpan(uint64(m.SpanId))
	}
	if m.ParentSpanId != 0 {
		n += 1 + sovSpan(uint64(m.ParentSpanId))
	}
	if m.Level != 0 {
		n += 1 + sovSpan(uint64(m.Level))
	}
	if m.StartAt != 0 {
		n += 1 + sovSpan(uint64(m.StartAt))
	}
	if m.FinishAt != 0 {
		n += 1 + sovSpan(uint64(m.FinishAt))
	}
	if m.Sample != 0 {
		n += 5
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	return n
}

func sovSpan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpan(x uint64) (n int) {
	return sovSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Tag_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Log_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			m.ParentSpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishAt", wireType)
			}
			m.FinishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sample", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Sample = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpan   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("library/net/trace/proto/span.proto", fileDescriptorSpan) }

var fileDescriptorSpan = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0xc7, 0x9d, 0xcd, 0xd7, 0xe6, 0x74, 0x29, 0x71, 0x2c, 0x75, 0x44, 0x59, 0xc2, 0xa2, 0x10,
	0xbc, 0xc8, 0x4a, 0x7d, 0x82, 0xed, 0x85, 0xb2, 0x18, 0xba, 0x30, 0x9b, 0x2b, 0x6f, 0x96, 0x69,
	0x33, 0x8d, 0x43, 0x27, 0x1f, 0x4c, 0xc6, 0x42, 0x9f, 0xc1, 0x27, 0xf1, 0x4d, 0xbc, 0xf4, 0xda,
	0x2b, 0xd9, 0x27, 0x91, 0x39, 0xd9, 0xa2, 0xa0, 0x20, 0x7a, 0x95, 0xf9, 0x9f, 0xdf, 0x3f, 0xe4,
	0x97, 0xe4, 0xc0, 0x42, 0xab, 0x4b, 0x23, 0xcc, 0xdd, 0xb2, 0x95, 0x76, 0x69, 0x8d, 0xb8, 0x92,
	0xcb, 0xde, 0x74, 0xb6, 0x5b, 0x0e, 0xbd, 0x68, 0x73, 0x3c, 0xd2, 0x59, 0x25, 0xfa, 0x5e, 0x9a,
	0x1c, 0xf1, 0xe2, 0x13, 0x01, 0xaf, 0x14, 0x35, 0x4d, 0xc0, 0xbb, 0x91, 0x77, 0x8c, 0xa4, 0x24,
	0x8b, 0xb9, 0x3b, 0xd2, 0x97, 0xe0, 0xdf, 0xa8, 0xb6, 0x62, 0x93, 0x94, 0x64, 0xc7, 0x67, 0xa7,
	0xf9, 0xaf, 0xb7, 0xe5, 0xa5, 0xa8, 0xf3, 0x77, 0xaa, 0xad, 0x38, 0x76, 0xe8, 0x09, 0x04, 0xb7,
	0x42, 0x7f, 0x94, 0xcc, 0x4b, 0x49, 0x36, 0xe3, 0x63, 0x58, 0xbc, 0x02, 0xdf, 0x75, 0x28, 0x40,
	0xb8, 0x2d, 0xf9, 0xfa, 0xe2, 0x6d, 0xf2, 0x80, 0x46, 0xe0, 0xad, 0x2f, 0xca, 0x84, 0xd0, 0x29,
	0xf8, 0xe7, 0x9b, 0x4d, 0x91, 0x4c, 0x68, 0x0c, 0xc1, 0x9b, 0x62, 0xb3, 0x2a, 0x13, 0x6f, 0xf1,
	0x99, 0x80, 0x57, 0x74, 0xff, 0x6c, 0x53, 0x74, 0x7f, 0xb7, 0xa1, 0xcf, 0x20, 0xb6, 0xaa, 0x91,
	0x83, 0x15, 0x4d, 0xcf, 0xfc, 0x94, 0x64, 0x1e, 0xff, 0x39, 0xf8, 0x0f, 0xd7, 0x6f, 0x13, 0xf0,
	0xb7, 0xbd, 0x68, 0xe9, 0x29, 0x84, 0xd7, 0xa2, 0x51, 0xfa, 0xde, 0xf7, 0x90, 0x9c, 0x86, 0x55,
	0x56, 0x4b, 0x74, 0x8e, 0xf9, 0x18, 0x5c, 0xfb, 0x4a, 0x68, 0x2d, 0x0d, 0xda, 0xc5, 0xfc, 0x90,
	0xe8, 0x13, 0x98, 0xe2, 0xcb, 0xec, 0x54, 0x85, 0x76, 0x3e, 0x8f, 0x30, 0xaf, 0x2b, 0xfa, 0x18,
	0x22, 0xf7, 0xff, 0x1c, 0x09, 0x90, 0x84, 0x2e, 0xae, 0x2b, 0xfa, 0x1c, 0x8e, 0x7b, 0x61, 0x64,
	0x6b, 0x77, 0xf7, 0x3c, 0x44, 0x3e, 0x1b, 0xa7, 0xdb, 0xb1, 0x75, 0x02, 0x81, 0x96, 0xb7, 0x52,
	0xb3, 0x28, 0x25, 0x59, 0xc0, 0xc7, 0xe0, 0x9e, 0x37, 0x58, 0x61, 0xec, 0x4e, 0x58, 0x36, 0xc5,
	0xaf, 0x11, 0x61, 0x5e, 0x59, 0xfa, 0x14, 0xe2, 0x6b, 0xd5, 0xaa, 0xe1, 0x83, 0x63, 0x31, 0xb2,
	0xe9, 0x38, 0x58, 0x59, 0xe7, 0x3f, 0x88, 0xa6, 0xd7, 0x92, 0x41, 0x4a, 0xb2, 0x09, 0x3f, 0x24,
	0xfa, 0x02, 0x7c, 0x2b, 0xea, 0x81, 0x1d, 0xa5, 0x5e, 0x76, 0x74, 0xf6, 0xf0, 0xb7, 0x75, 0xe1,
	0x88, 0x5d, 0x4d, 0x77, 0xf5, 0xc0, 0x66, 0x7f, 0xaa, 0x15, 0x5d, 0xcd, 0x11, 0x9f, 0x3f, 0xfa,
	0xb2, 0x9f, 0x93, 0xaf, 0xfb, 0x39, 0xf9, 0xbe, 0x9f, 0x93, 0xf7, 0x01, 0x6e, 0xee, 0x65, 0x88,
	0x97, 0xd7, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x0b, 0x92, 0x41, 0xe6, 0x02, 0x00, 0x00,
}
