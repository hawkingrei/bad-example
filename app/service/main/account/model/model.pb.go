// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/account/model/model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/account/model/model.proto

	It has these top-level messages:
		Card
		Info
		Profile
		PendantInfo
		NameplateInfo
		VipInfo
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import account_service_member "go-common/app/service/main/member/model"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Card struct {
	Mid       int64                               `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name      string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex       string                              `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	Face      string                              `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Sign      string                              `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	Rank      int32                               `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
	Level     int32                               `protobuf:"varint,7,opt,name=level,proto3" json:"level"`
	Silence   int32                               `protobuf:"varint,8,opt,name=silence,proto3" json:"silence"`
	Vip       VipInfo                             `protobuf:"bytes,9,opt,name=vip" json:"vip"`
	Pendant   PendantInfo                         `protobuf:"bytes,10,opt,name=pendant" json:"pendant"`
	Nameplate NameplateInfo                       `protobuf:"bytes,11,opt,name=nameplate" json:"nameplate"`
	Official  account_service_member.OfficialInfo `protobuf:"bytes,12,opt,name=official" json:"official"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *Card) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Card) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Card) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Card) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Card) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Card) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Card) GetSilence() int32 {
	if m != nil {
		return m.Silence
	}
	return 0
}

func (m *Card) GetVip() VipInfo {
	if m != nil {
		return m.Vip
	}
	return VipInfo{}
}

func (m *Card) GetPendant() PendantInfo {
	if m != nil {
		return m.Pendant
	}
	return PendantInfo{}
}

func (m *Card) GetNameplate() NameplateInfo {
	if m != nil {
		return m.Nameplate
	}
	return NameplateInfo{}
}

func (m *Card) GetOfficial() account_service_member.OfficialInfo {
	if m != nil {
		return m.Official
	}
	return account_service_member.OfficialInfo{}
}

type Info struct {
	Mid  int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex  string `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	Rank int32  `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *Info) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Info) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Info) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Info) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type Profile struct {
	Mid            int64                               `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name           string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex            string                              `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	Face           string                              `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Sign           string                              `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	Rank           int32                               `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
	Level          int32                               `protobuf:"varint,7,opt,name=level,proto3" json:"level"`
	JoinTime       int32                               `protobuf:"varint,8,opt,name=join_time,json=joinTime,proto3" json:"jointime"`
	Moral          int32                               `protobuf:"varint,9,opt,name=moral,proto3" json:"moral"`
	Silence        int32                               `protobuf:"varint,10,opt,name=silence,proto3" json:"silence"`
	EmailStatus    int32                               `protobuf:"varint,11,opt,name=email_status,json=emailStatus,proto3" json:"email_status"`
	TelStatus      int32                               `protobuf:"varint,12,opt,name=tel_status,json=telStatus,proto3" json:"tel_status"`
	Identification int32                               `protobuf:"varint,13,opt,name=identification,proto3" json:"identification"`
	Vip            VipInfo                             `protobuf:"bytes,14,opt,name=vip" json:"vip"`
	Pendant        PendantInfo                         `protobuf:"bytes,15,opt,name=pendant" json:"pendant"`
	Nameplate      NameplateInfo                       `protobuf:"bytes,16,opt,name=nameplate" json:"nameplate"`
	Official       account_service_member.OfficialInfo `protobuf:"bytes,17,opt,name=official" json:"official"`
	Birthday       go_common_library_time.Time         `protobuf:"varint,18,opt,name=birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *Profile) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Profile) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Profile) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Profile) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Profile) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Profile) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *Profile) GetMoral() int32 {
	if m != nil {
		return m.Moral
	}
	return 0
}

func (m *Profile) GetSilence() int32 {
	if m != nil {
		return m.Silence
	}
	return 0
}

func (m *Profile) GetEmailStatus() int32 {
	if m != nil {
		return m.EmailStatus
	}
	return 0
}

func (m *Profile) GetTelStatus() int32 {
	if m != nil {
		return m.TelStatus
	}
	return 0
}

func (m *Profile) GetIdentification() int32 {
	if m != nil {
		return m.Identification
	}
	return 0
}

func (m *Profile) GetVip() VipInfo {
	if m != nil {
		return m.Vip
	}
	return VipInfo{}
}

func (m *Profile) GetPendant() PendantInfo {
	if m != nil {
		return m.Pendant
	}
	return PendantInfo{}
}

func (m *Profile) GetNameplate() NameplateInfo {
	if m != nil {
		return m.Nameplate
	}
	return NameplateInfo{}
}

func (m *Profile) GetOfficial() account_service_member.OfficialInfo {
	if m != nil {
		return m.Official
	}
	return account_service_member.OfficialInfo{}
}

func (m *Profile) GetBirthday() go_common_library_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

type PendantInfo struct {
	Pid    int    `protobuf:"varint,1,opt,name=pid,proto3,casttype=int" json:"pid"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Image  string `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	Expire int    `protobuf:"varint,4,opt,name=expire,proto3,casttype=int" json:"expire"`
}

func (m *PendantInfo) Reset()                    { *m = PendantInfo{} }
func (m *PendantInfo) String() string            { return proto.CompactTextString(m) }
func (*PendantInfo) ProtoMessage()               {}
func (*PendantInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *PendantInfo) GetPid() int {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *PendantInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PendantInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PendantInfo) GetExpire() int {
	if m != nil {
		return m.Expire
	}
	return 0
}

type NameplateInfo struct {
	Nid        int    `protobuf:"varint,1,opt,name=nid,proto3,casttype=int" json:"nid"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Image      string `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	ImageSmall string `protobuf:"bytes,4,opt,name=image_small,json=imageSmall,proto3" json:"image_small"`
	Level      string `protobuf:"bytes,5,opt,name=level,proto3" json:"level"`
	Condition  string `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition"`
}

func (m *NameplateInfo) Reset()                    { *m = NameplateInfo{} }
func (m *NameplateInfo) String() string            { return proto.CompactTextString(m) }
func (*NameplateInfo) ProtoMessage()               {}
func (*NameplateInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{4} }

func (m *NameplateInfo) GetNid() int {
	if m != nil {
		return m.Nid
	}
	return 0
}

func (m *NameplateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameplateInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NameplateInfo) GetImageSmall() string {
	if m != nil {
		return m.ImageSmall
	}
	return ""
}

func (m *NameplateInfo) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *NameplateInfo) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type VipInfo struct {
	Type       int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Status     int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	DueDate    int64 `protobuf:"varint,3,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
	VipPayType int32 `protobuf:"varint,4,opt,name=vip_pay_type,json=vipPayType,proto3" json:"vip_pay_type"`
}

func (m *VipInfo) Reset()                    { *m = VipInfo{} }
func (m *VipInfo) String() string            { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()               {}
func (*VipInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{5} }

func (m *VipInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VipInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VipInfo) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *VipInfo) GetVipPayType() int32 {
	if m != nil {
		return m.VipPayType
	}
	return 0
}

func init() {
	proto.RegisterType((*Card)(nil), "account.service.Card")
	proto.RegisterType((*Info)(nil), "account.service.Info")
	proto.RegisterType((*Profile)(nil), "account.service.Profile")
	proto.RegisterType((*PendantInfo)(nil), "account.service.PendantInfo")
	proto.RegisterType((*NameplateInfo)(nil), "account.service.NameplateInfo")
	proto.RegisterType((*VipInfo)(nil), "account.service.VipInfo")
}
func (m *Card) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Rank))
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Level))
	}
	if m.Silence != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Silence))
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Vip.Size()))
	n1, err := m.Vip.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x52
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Pendant.Size()))
	n2, err := m.Pendant.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x5a
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Nameplate.Size()))
	n3, err := m.Nameplate.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x62
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Official.Size()))
	n4, err := m.Official.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Rank))
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Level))
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.JoinTime))
	}
	if m.Moral != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Moral))
	}
	if m.Silence != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Silence))
	}
	if m.EmailStatus != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.EmailStatus))
	}
	if m.TelStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.TelStatus))
	}
	if m.Identification != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Identification))
	}
	dAtA[i] = 0x72
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Vip.Size()))
	n5, err := m.Vip.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x7a
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Pendant.Size()))
	n6, err := m.Pendant.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Nameplate.Size()))
	n7, err := m.Nameplate.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.Official.Size()))
	n8, err := m.Official.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.Birthday != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Birthday))
	}
	return i, nil
}

func (m *PendantInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendantInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Pid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Expire != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func (m *NameplateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameplateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Nid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.ImageSmall) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.ImageSmall)))
		i += copy(dAtA[i:], m.ImageSmall)
	}
	if len(m.Level) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	if len(m.Condition) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Condition)))
		i += copy(dAtA[i:], m.Condition)
	}
	return i, nil
}

func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if m.DueDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipPayType))
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Card) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovModel(uint64(m.Rank))
	}
	if m.Level != 0 {
		n += 1 + sovModel(uint64(m.Level))
	}
	if m.Silence != 0 {
		n += 1 + sovModel(uint64(m.Silence))
	}
	l = m.Vip.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Pendant.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Nameplate.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Official.Size()
	n += 1 + l + sovModel(uint64(l))
	return n
}

func (m *Info) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovModel(uint64(m.Rank))
	}
	return n
}

func (m *Profile) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovModel(uint64(m.Rank))
	}
	if m.Level != 0 {
		n += 1 + sovModel(uint64(m.Level))
	}
	if m.JoinTime != 0 {
		n += 1 + sovModel(uint64(m.JoinTime))
	}
	if m.Moral != 0 {
		n += 1 + sovModel(uint64(m.Moral))
	}
	if m.Silence != 0 {
		n += 1 + sovModel(uint64(m.Silence))
	}
	if m.EmailStatus != 0 {
		n += 1 + sovModel(uint64(m.EmailStatus))
	}
	if m.TelStatus != 0 {
		n += 1 + sovModel(uint64(m.TelStatus))
	}
	if m.Identification != 0 {
		n += 1 + sovModel(uint64(m.Identification))
	}
	l = m.Vip.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Pendant.Size()
	n += 1 + l + sovModel(uint64(l))
	l = m.Nameplate.Size()
	n += 2 + l + sovModel(uint64(l))
	l = m.Official.Size()
	n += 2 + l + sovModel(uint64(l))
	if m.Birthday != 0 {
		n += 2 + sovModel(uint64(m.Birthday))
	}
	return n
}

func (m *PendantInfo) Size() (n int) {
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovModel(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovModel(uint64(m.Expire))
	}
	return n
}

func (m *NameplateInfo) Size() (n int) {
	var l int
	_ = l
	if m.Nid != 0 {
		n += 1 + sovModel(uint64(m.Nid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.ImageSmall)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *VipInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovModel(uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		n += 1 + sovModel(uint64(m.VipPayType))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Card) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silence", wireType)
			}
			m.Silence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Silence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pendant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pendant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nameplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Official.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moral", wireType)
			}
			m.Moral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Moral |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silence", wireType)
			}
			m.Silence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Silence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailStatus", wireType)
			}
			m.EmailStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmailStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelStatus", wireType)
			}
			m.TelStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TelStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			m.Identification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identification |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pendant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pendant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nameplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Official.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendantInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendantInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameplateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameplateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameplateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			m.Nid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nid |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageSmall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageSmall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/account/model/model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x3f, 0x8f, 0xe3, 0x44,
	0x14, 0xc7, 0xe7, 0xfc, 0x7d, 0xc9, 0x6e, 0x76, 0x87, 0xc6, 0x1c, 0xa7, 0x38, 0x8a, 0x40, 0x64,
	0x39, 0x6d, 0x8c, 0xee, 0x0a, 0x24, 0xca, 0x80, 0x74, 0xa2, 0xe1, 0x56, 0x73, 0x2b, 0x0a, 0x9a,
	0x68, 0x62, 0x4f, 0x72, 0x03, 0xf6, 0x8c, 0x65, 0x3b, 0xd1, 0xe6, 0xa3, 0x50, 0xd3, 0xf0, 0x01,
	0xf8, 0x10, 0x5b, 0xd2, 0x23, 0x59, 0x68, 0x4b, 0x57, 0xd4, 0x5b, 0xa1, 0x79, 0x1e, 0xc7, 0xc9,
	0x46, 0x82, 0x62, 0xb7, 0x81, 0xe6, 0xcd, 0xfb, 0xfd, 0xde, 0x9f, 0xf9, 0x93, 0xf7, 0xb3, 0x02,
	0x9f, 0xb3, 0x38, 0xf6, 0x52, 0x9e, 0x6c, 0x84, 0xcf, 0xbd, 0x88, 0x09, 0xe9, 0x31, 0xdf, 0x57,
	0x6b, 0x99, 0x79, 0x91, 0x0a, 0x78, 0x58, 0xda, 0x69, 0x9c, 0xa8, 0x4c, 0x91, 0x81, 0x09, 0x4d,
	0x4d, 0xfe, 0xf3, 0xcb, 0x95, 0xc8, 0xde, 0xaf, 0x17, 0x53, 0x5f, 0x45, 0xde, 0x4a, 0xad, 0x94,
	0x87, 0x79, 0x8b, 0xf5, 0x12, 0x11, 0x02, 0xf4, 0xca, 0xfa, 0xe7, 0x17, 0x47, 0x7b, 0x45, 0x3c,
	0x5a, 0xf0, 0xe4, 0x78, 0xab, 0xf1, 0x2f, 0x0d, 0x68, 0x7c, 0xcd, 0x92, 0x80, 0x7c, 0x04, 0x76,
	0x24, 0x02, 0xc7, 0x1a, 0x59, 0x13, 0x7b, 0xd6, 0x2e, 0x72, 0x57, 0x43, 0xaa, 0x0d, 0x79, 0x01,
	0x0d, 0xc9, 0x22, 0xee, 0x3c, 0x1b, 0x59, 0x93, 0xee, 0xac, 0x53, 0xe4, 0x2e, 0x62, 0x8a, 0x56,
	0x17, 0xa6, 0xfc, 0xc6, 0xb1, 0x31, 0x88, 0x85, 0x29, 0xbf, 0xa1, 0xda, 0xe8, 0xc2, 0x25, 0xf3,
	0xb9, 0xd3, 0xa8, 0x0b, 0x35, 0xa6, 0x68, 0x75, 0x34, 0x15, 0x2b, 0xe9, 0x34, 0xeb, 0xa8, 0xc6,
	0x14, 0xad, 0x8e, 0x26, 0x4c, 0xfe, 0xe4, 0xb4, 0x46, 0xd6, 0xa4, 0x59, 0x46, 0x35, 0xa6, 0x68,
	0x89, 0x0b, 0xcd, 0x90, 0x6f, 0x78, 0xe8, 0xb4, 0x31, 0xdc, 0x2d, 0x72, 0xb7, 0x24, 0x68, 0xb9,
	0x90, 0x4f, 0xa1, 0x9d, 0x8a, 0x90, 0x4b, 0x9f, 0x3b, 0x1d, 0x4c, 0xe9, 0x15, 0xb9, 0x5b, 0x51,
	0xb4, 0x72, 0xc8, 0x97, 0x60, 0x6f, 0x44, 0xec, 0x74, 0x47, 0xd6, 0xa4, 0xf7, 0xca, 0x99, 0x3e,
	0x78, 0xf7, 0xe9, 0xf7, 0x22, 0xfe, 0x56, 0x2e, 0xd5, 0xac, 0x77, 0x9b, 0xbb, 0x1f, 0xe8, 0xab,
	0x6d, 0x44, 0x4c, 0xb5, 0x21, 0x6f, 0xa0, 0x1d, 0x73, 0x19, 0x30, 0x99, 0x39, 0x80, 0xc5, 0x2f,
	0x8e, 0x8a, 0xaf, 0xca, 0x38, 0x36, 0x18, 0x98, 0x06, 0x55, 0x11, 0xad, 0x1c, 0xf2, 0x16, 0xba,
	0xfa, 0x19, 0xe3, 0x90, 0x65, 0xdc, 0xe9, 0x61, 0xab, 0xe1, 0x51, 0xab, 0xef, 0xaa, 0x0c, 0x6c,
	0x76, 0x6e, 0x9a, 0xd5, 0x85, 0xb4, 0x76, 0x09, 0x85, 0x8e, 0x5a, 0x2e, 0x85, 0x2f, 0x58, 0xe8,
	0xf4, 0xb1, 0xdf, 0x27, 0x47, 0xfd, 0xca, 0x71, 0x98, 0xbe, 0x35, 0x79, 0xd8, 0xf5, 0xcc, 0x74,
	0xdd, 0x55, 0xd3, 0x9d, 0x37, 0xfe, 0xcd, 0x82, 0x86, 0x4e, 0xfa, 0x6f, 0x4d, 0xc9, 0xf8, 0x8f,
	0x16, 0xb4, 0xaf, 0x12, 0xb5, 0x14, 0x21, 0xff, 0xbf, 0xcd, 0xf7, 0x05, 0x74, 0x7f, 0x54, 0x42,
	0xce, 0x33, 0x11, 0x55, 0x13, 0xde, 0xd7, 0x3f, 0x9e, 0x26, 0x35, 0x47, 0xd1, 0xbb, 0x16, 0x11,
	0xd7, 0xbd, 0x22, 0x95, 0xb0, 0x10, 0xa7, 0xdc, 0xf4, 0x42, 0x82, 0x96, 0xcb, 0xbe, 0x56, 0xe0,
	0x1f, 0xb4, 0xf2, 0x1a, 0xfa, 0x3c, 0x62, 0x22, 0x9c, 0xa7, 0x19, 0xcb, 0xd6, 0x29, 0x0e, 0x6b,
	0x73, 0x76, 0x56, 0xe4, 0xee, 0x01, 0x4f, 0x7b, 0x88, 0xde, 0x21, 0x20, 0x97, 0x00, 0x19, 0xdf,
	0x95, 0xf4, 0xb1, 0xe4, 0xb4, 0xc8, 0xdd, 0x3d, 0x96, 0x76, 0x33, 0x5e, 0xa5, 0x7f, 0x05, 0xa7,
	0x22, 0xe0, 0x32, 0x13, 0x4b, 0xe1, 0xb3, 0x4c, 0x28, 0xe9, 0x9c, 0x60, 0x09, 0x29, 0x72, 0xf7,
	0x41, 0x84, 0x3e, 0xc0, 0x95, 0x96, 0x4f, 0x1f, 0xa3, 0xe5, 0xc1, 0xd3, 0x69, 0xf9, 0xec, 0x89,
	0xb5, 0x7c, 0xfe, 0x34, 0x5a, 0x26, 0x6f, 0xa0, 0xb3, 0x10, 0x49, 0xf6, 0x3e, 0x60, 0x5b, 0x87,
	0xa0, 0x1a, 0x5e, 0xea, 0xcc, 0x8a, 0xbb, 0xcf, 0xdd, 0x8f, 0x57, 0xea, 0xd2, 0x57, 0x51, 0xa4,
	0xa4, 0x17, 0x8a, 0x45, 0xc2, 0x92, 0xad, 0xa7, 0x47, 0x6a, 0x7a, 0x8d, 0x73, 0x55, 0x25, 0x8e,
	0x7f, 0xb6, 0xa0, 0xb7, 0xf7, 0x2e, 0x64, 0x04, 0x76, 0x6c, 0x14, 0x56, 0xfe, 0xc6, 0x1a, 0xde,
	0xe7, 0xae, 0x2d, 0x64, 0x46, 0xb5, 0xff, 0x2f, 0x42, 0x73, 0xa1, 0x29, 0x22, 0xb6, 0xe2, 0x46,
	0x6a, 0x38, 0xa7, 0x48, 0xd0, 0x72, 0x21, 0x17, 0xd0, 0xe2, 0x37, 0xb1, 0x48, 0x4a, 0xc1, 0xd9,
	0xb3, 0xf3, 0x22, 0x77, 0x0d, 0x53, 0x6d, 0x63, 0xe0, 0xf8, 0x2f, 0x0b, 0x4e, 0x0e, 0x1e, 0x5a,
	0x9f, 0x4e, 0x1e, 0x9e, 0x4e, 0xee, 0x9d, 0x4e, 0x3e, 0xfe, 0x74, 0x5f, 0x40, 0x0f, 0x9d, 0x79,
	0x1a, 0xb1, 0x30, 0x34, 0xdf, 0x84, 0x41, 0x91, 0xbb, 0xfb, 0x34, 0x05, 0x04, 0xef, 0xb4, 0x5f,
	0x8b, 0xbc, 0x59, 0xb7, 0x3c, 0x10, 0xf9, 0x4b, 0xe8, 0xfa, 0x4a, 0x06, 0x02, 0x85, 0xd0, 0xc2,
	0xa4, 0x13, 0x3d, 0x2b, 0x3b, 0x92, 0xd6, 0xee, 0xf8, 0x57, 0x0b, 0xda, 0x66, 0xc6, 0xf5, 0x55,
	0xb2, 0x6d, 0xcc, 0xcd, 0x6d, 0xf1, 0x2a, 0x1a, 0x53, 0xb4, 0x64, 0x0c, 0x2d, 0xa3, 0xc7, 0x67,
	0x18, 0x07, 0xfd, 0x8e, 0x46, 0x8b, 0x66, 0x25, 0x9f, 0x41, 0x27, 0x58, 0xf3, 0x79, 0xa0, 0x27,
	0xd9, 0xc6, 0xd7, 0xc6, 0xcf, 0x4b, 0xc5, 0xd1, 0x76, 0xb0, 0xe6, 0xdf, 0xe8, 0x11, 0x7d, 0x05,
	0xfd, 0x8d, 0x88, 0xe7, 0x31, 0xdb, 0xce, 0x71, 0xcb, 0x46, 0xfd, 0x55, 0xd8, 0xe7, 0x29, 0x6c,
	0x44, 0x7c, 0xc5, 0xb6, 0xd7, 0xdb, 0x98, 0xcf, 0x3e, 0xbc, 0xbd, 0x1b, 0x5a, 0xbf, 0xdf, 0x0d,
	0xad, 0x3f, 0xef, 0x86, 0xd6, 0x0f, 0x4d, 0xfc, 0x3f, 0xb2, 0x68, 0xe1, 0x1f, 0x92, 0xd7, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x7f, 0xb3, 0xe5, 0x29, 0x09, 0x00, 0x00,
}
