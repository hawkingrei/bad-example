// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vip.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VipInfo struct {
	*VipInfoDB           `protobuf:"bytes,1,opt,name=VipInfoDB,embedded=VipInfoDB" json:""`
	AutoRenewed          int32    `protobuf:"varint,2,opt,name=AutoRenewed,proto3" json:"auto_renewed"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipInfo) Reset()         { *m = VipInfo{} }
func (m *VipInfo) String() string { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()    {}
func (*VipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_de0faad38dd936c1, []int{0}
}
func (m *VipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfo.Merge(dst, src)
}
func (m *VipInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfo proto.InternalMessageInfo

type VipInfoDB struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	VipType              int32                       `protobuf:"varint,3,opt,name=VipType,proto3" json:"vip_type"`
	VipPayType           int32                       `protobuf:"varint,4,opt,name=VipPayType,proto3" json:"vip_pay_type"`
	PayChannelID         int32                       `protobuf:"varint,5,opt,name=PayChannelID,proto3" json:"pay_channel_id"`
	VipStatus            int32                       `protobuf:"varint,6,opt,name=VipStatus,proto3" json:"vip_status"`
	VipStartTime         go_common_library_time.Time `protobuf:"varint,7,opt,name=VipStartTime,proto3,casttype=go-common/library/time.Time" json:"vip_start_time"`
	VipRecentTime        go_common_library_time.Time `protobuf:"varint,8,opt,name=VipRecentTime,proto3,casttype=go-common/library/time.Time" json:"vip_recent_time"`
	VipOverdueTime       go_common_library_time.Time `protobuf:"varint,9,opt,name=VipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"vip_overdue_time"`
	AnnualVipOverdueTime go_common_library_time.Time `protobuf:"varint,10,opt,name=AnnualVipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"annual_vip_overdue_time"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	IosOverdueTime       go_common_library_time.Time `protobuf:"varint,13,opt,name=IosOverdueTime,proto3,casttype=go-common/library/time.Time" json:"ios_overdue_time"`
	Ver                  int64                       `protobuf:"varint,14,opt,name=Ver,proto3" json:"ver"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VipInfoDB) Reset()         { *m = VipInfoDB{} }
func (m *VipInfoDB) String() string { return proto.CompactTextString(m) }
func (*VipInfoDB) ProtoMessage()    {}
func (*VipInfoDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_de0faad38dd936c1, []int{1}
}
func (m *VipInfoDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfoDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfoDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VipInfoDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfoDB.Merge(dst, src)
}
func (m *VipInfoDB) XXX_Size() int {
	return m.Size()
}
func (m *VipInfoDB) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfoDB.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfoDB proto.InternalMessageInfo

type VipPanelInfo struct {
	Month                int32    `protobuf:"varint,1,opt,name=Month,proto3" json:"month"`
	PdName               string   `protobuf:"bytes,2,opt,name=PdName,proto3" json:"product_name"`
	PdID                 string   `protobuf:"bytes,3,opt,name=PdID,proto3" json:"product_id"`
	SubType              int32    `protobuf:"varint,4,opt,name=SubType,proto3" json:"sub_type"`
	SuitType             int32    `protobuf:"varint,5,opt,name=SuitType,proto3" json:"suit_type"`
	OPrice               float64  `protobuf:"fixed64,6,opt,name=OPrice,proto3" json:"original_price"`
	DPrice               float64  `protobuf:"fixed64,7,opt,name=DPrice,proto3" json:"discount_price"`
	DRate                string   `protobuf:"bytes,8,opt,name=DRate,proto3" json:"discount_rate"`
	Remark               string   `protobuf:"bytes,9,opt,name=Remark,proto3" json:"remark"`
	Selected             int32    `protobuf:"varint,10,opt,name=Selected,proto3" json:"selected"`
	Id                   int64    `protobuf:"varint,11,opt,name=Id,proto3" json:"id"`
	Type                 int32    `protobuf:"varint,12,opt,name=Type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipPanelInfo) Reset()         { *m = VipPanelInfo{} }
func (m *VipPanelInfo) String() string { return proto.CompactTextString(m) }
func (*VipPanelInfo) ProtoMessage()    {}
func (*VipPanelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_de0faad38dd936c1, []int{2}
}
func (m *VipPanelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipPanelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipPanelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VipPanelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipPanelInfo.Merge(dst, src)
}
func (m *VipPanelInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipPanelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipPanelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipPanelInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VipInfo)(nil), "account.service.vip.VipInfo")
	proto.RegisterType((*VipInfoDB)(nil), "account.service.vip.VipInfoDB")
	proto.RegisterType((*VipPanelInfo)(nil), "account.service.vip.VipPanelInfo")
}
func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipInfoDB != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipInfoDB.Size()))
		n1, err := m.VipInfoDB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.AutoRenewed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AutoRenewed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VipInfoDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfoDB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mid))
	}
	if m.VipType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Ver))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VipPanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipPanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Month != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Month))
	}
	if len(m.PdName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.PdName)))
		i += copy(dAtA[i:], m.PdName)
	}
	if len(m.PdID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.PdID)))
		i += copy(dAtA[i:], m.PdID)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.SubType))
	}
	if m.SuitType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.SuitType))
	}
	if m.OPrice != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OPrice))))
		i += 8
	}
	if m.DPrice != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DPrice))))
		i += 8
	}
	if len(m.DRate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.DRate)))
		i += copy(dAtA[i:], m.DRate)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Selected))
	}
	if m.Id != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VipInfo) Size() (n int) {
	var l int
	_ = l
	if m.VipInfoDB != nil {
		l = m.VipInfoDB.Size()
		n += 1 + l + sovVip(uint64(l))
	}
	if m.AutoRenewed != 0 {
		n += 1 + sovVip(uint64(m.AutoRenewed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipInfoDB) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVip(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovVip(uint64(m.Mid))
	}
	if m.VipType != 0 {
		n += 1 + sovVip(uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		n += 1 + sovVip(uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		n += 1 + sovVip(uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		n += 1 + sovVip(uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		n += 1 + sovVip(uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		n += 1 + sovVip(uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovVip(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovVip(uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		n += 1 + sovVip(uint64(m.Ver))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipPanelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Month != 0 {
		n += 1 + sovVip(uint64(m.Month))
	}
	l = len(m.PdName)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	l = len(m.PdID)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovVip(uint64(m.SubType))
	}
	if m.SuitType != 0 {
		n += 1 + sovVip(uint64(m.SuitType))
	}
	if m.OPrice != 0 {
		n += 9
	}
	if m.DPrice != 0 {
		n += 9
	}
	l = len(m.DRate)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovVip(uint64(m.Selected))
	}
	if m.Id != 0 {
		n += 1 + sovVip(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovVip(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfoDB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfoDB == nil {
				m.VipInfoDB = &VipInfoDB{}
			}
			if err := m.VipInfoDB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRenewed", wireType)
			}
			m.AutoRenewed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRenewed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfoDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfoDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfoDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannelID", wireType)
			}
			m.PayChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStatus", wireType)
			}
			m.VipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStartTime", wireType)
			}
			m.VipStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStartTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipRecentTime", wireType)
			}
			m.VipRecentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipRecentTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipOverdueTime", wireType)
			}
			m.VipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualVipOverdueTime", wireType)
			}
			m.AnnualVipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnnualVipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosOverdueTime", wireType)
			}
			m.IosOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IosOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipPanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipPanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipPanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitType", wireType)
			}
			m.SuitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OPrice = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vip.proto", fileDescriptor_vip_de0faad38dd936c1) }

var fileDescriptor_vip_de0faad38dd936c1 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x9b, 0xda, 0x8d, 0xa7, 0x69, 0x59, 0x06, 0x04, 0xe6, 0x8f, 0x32, 0xab, 0x1c, 0x20,
	0x20, 0x36, 0x85, 0xae, 0xc4, 0x81, 0x03, 0xd2, 0x7a, 0x23, 0xa4, 0x1c, 0xca, 0x46, 0xd3, 0x25,
	0x42, 0x70, 0x88, 0x26, 0xf6, 0x6c, 0x3a, 0x22, 0xf6, 0x58, 0xe3, 0x71, 0x50, 0x3e, 0x00, 0xdf,
	0x81, 0x8f, 0xb4, 0xc7, 0x5e, 0xb8, 0x8e, 0xd8, 0x72, 0xf3, 0x99, 0x13, 0x27, 0x34, 0x6f, 0xdc,
	0x3a, 0x59, 0xed, 0x21, 0x7b, 0xf3, 0xbc, 0xdf, 0x9f, 0xe7, 0x37, 0x9a, 0xdf, 0x43, 0xe1, 0x5a,
	0x14, 0xa3, 0x42, 0x49, 0x2d, 0xf1, 0x7b, 0x2c, 0x49, 0x64, 0x95, 0xeb, 0x51, 0xc9, 0xd5, 0x5a,
	0x24, 0x7c, 0xb4, 0x16, 0xc5, 0xc7, 0x8f, 0x96, 0x42, 0x5f, 0x57, 0x8b, 0x51, 0x22, 0xb3, 0xf3,
	0xa5, 0x5c, 0xca, 0x73, 0xe0, 0x2e, 0xaa, 0x17, 0x70, 0x82, 0x03, 0x7c, 0x39, 0x8f, 0xc1, 0x1f,
	0x1e, 0x3a, 0x9e, 0x89, 0x62, 0x92, 0xbf, 0x90, 0xf8, 0x07, 0x14, 0x36, 0x9f, 0xe3, 0x38, 0xf2,
	0x1e, 0x7a, 0xc3, 0x93, 0x8b, 0xfe, 0xe8, 0x0d, 0x3d, 0x46, 0xf7, 0xac, 0xb8, 0x7b, 0x63, 0x88,
	0x57, 0x1b, 0x72, 0x40, 0x5b, 0x29, 0xbe, 0x40, 0x27, 0x4f, 0x2a, 0x2d, 0x29, 0xcf, 0xf9, 0xef,
	0x3c, 0x8d, 0x0e, 0x1f, 0x7a, 0x43, 0x3f, 0x7e, 0x50, 0x1b, 0xd2, 0x63, 0x95, 0x96, 0x73, 0xe5,
	0xea, 0x74, 0x9b, 0x34, 0xf8, 0x37, 0xd8, 0x6a, 0x8e, 0x3f, 0x40, 0x87, 0x93, 0x31, 0xfc, 0x42,
	0x27, 0x0e, 0x6a, 0x43, 0x0e, 0x45, 0x4a, 0x0f, 0x27, 0x63, 0xfc, 0x11, 0xea, 0x5c, 0x0a, 0xe7,
	0xd8, 0x89, 0x8f, 0x6b, 0x43, 0x3a, 0x99, 0x48, 0xa9, 0xad, 0xe1, 0xcf, 0x60, 0x8e, 0xe7, 0x9b,
	0x82, 0x47, 0x1d, 0x68, 0xd8, 0xab, 0x0d, 0xe9, 0xae, 0x45, 0x31, 0xd7, 0x9b, 0x82, 0xd3, 0x3b,
	0x10, 0x7f, 0x8d, 0xd0, 0x4c, 0x14, 0x53, 0xb6, 0x01, 0xea, 0x51, 0xfb, 0x6f, 0x96, 0x5a, 0xb0,
	0x8d, 0xa3, 0x6f, 0x71, 0xf0, 0xb7, 0xa8, 0x37, 0x65, 0x9b, 0xa7, 0xd7, 0x2c, 0xcf, 0xf9, 0x6a,
	0x32, 0x8e, 0x7c, 0xd0, 0xe0, 0xda, 0x90, 0x33, 0xcb, 0x4f, 0x1c, 0x30, 0x17, 0x29, 0xdd, 0xe1,
	0xe1, 0xaf, 0x60, 0xa2, 0x2b, 0xcd, 0x74, 0x55, 0x46, 0x01, 0x88, 0xce, 0x6a, 0x43, 0x90, 0x6d,
	0x54, 0x42, 0x95, 0xb6, 0x04, 0xfc, 0x13, 0xea, 0xb9, 0x83, 0xd2, 0xcf, 0x45, 0xc6, 0xa3, 0x63,
	0x98, 0xf1, 0x1b, 0xdb, 0xa5, 0x11, 0x28, 0x3d, 0xd7, 0x22, 0xe3, 0xff, 0x19, 0xf2, 0xc9, 0x52,
	0x3e, 0x4a, 0x64, 0x96, 0xc9, 0xfc, 0x7c, 0x25, 0x16, 0x8a, 0xa9, 0xcd, 0xb9, 0x45, 0x46, 0x56,
	0x48, 0x77, 0x6c, 0xf0, 0xcf, 0xe8, 0x74, 0x26, 0x0a, 0xca, 0x13, 0x9e, 0x3b, 0xdf, 0x2e, 0xf8,
	0x5e, 0xd4, 0x86, 0xbc, 0x63, 0x7d, 0x15, 0x20, 0x7b, 0x19, 0xef, 0x1a, 0xe1, 0x5f, 0xd1, 0xd9,
	0x4c, 0x14, 0xcf, 0xd6, 0x5c, 0xa5, 0x15, 0x07, 0xeb, 0x10, 0xac, 0x1f, 0xd7, 0x86, 0x3c, 0xb0,
	0xd6, 0xd2, 0x41, 0x7b, 0x79, 0xbf, 0x66, 0x85, 0x73, 0xf4, 0xfe, 0x93, 0x3c, 0xaf, 0xd8, 0xea,
	0xb5, 0x16, 0x08, 0x5a, 0x7c, 0x57, 0x1b, 0xf2, 0x21, 0x03, 0x7c, 0xfe, 0xb6, 0x9d, 0xde, 0xe8,
	0x8b, 0xbf, 0x47, 0xfe, 0x53, 0xcb, 0x89, 0x4e, 0xa0, 0xc1, 0xb0, 0x36, 0xc4, 0x4f, 0xf6, 0xb1,
	0x73, 0x32, 0xab, 0xbf, 0x04, 0x7d, 0xaf, 0xd5, 0x67, 0x7b, 0xe9, 0x41, 0x66, 0x2f, 0x73, 0x22,
	0xcb, 0xed, 0x49, 0x4f, 0xdb, 0xcb, 0x14, 0xb2, 0x7c, 0xbb, 0xcb, 0xdc, 0xb5, 0xb2, 0xa9, 0x99,
	0x71, 0x15, 0x9d, 0xb5, 0xa9, 0x59, 0x73, 0x45, 0x6d, 0x6d, 0xf0, 0x57, 0x07, 0x9e, 0xdd, 0x94,
	0xd9, 0x27, 0x6b, 0x77, 0x00, 0x41, 0xfe, 0xa5, 0xcc, 0xf5, 0x35, 0x84, 0xcf, 0x8f, 0x43, 0x18,
	0xc4, 0x16, 0xa8, 0xab, 0xe3, 0x21, 0x0a, 0xa6, 0xe9, 0x8f, 0x2c, 0xe3, 0x90, 0xc2, 0xd0, 0x65,
	0xa7, 0x50, 0x32, 0xad, 0x12, 0x3d, 0xcf, 0x59, 0xc6, 0x69, 0x83, 0xe3, 0x01, 0x3a, 0x9a, 0xa6,
	0x93, 0x31, 0xc4, 0x31, 0x74, 0x4f, 0xff, 0x8e, 0x27, 0x52, 0x0a, 0x98, 0x4d, 0xed, 0x55, 0xb5,
	0xd8, 0x8a, 0x22, 0xa4, 0xb6, 0xac, 0x16, 0x4d, 0x6a, 0x1b, 0x10, 0x7f, 0x81, 0xba, 0x57, 0x95,
	0xd0, 0x40, 0x74, 0xf9, 0x3b, 0xad, 0x0d, 0x09, 0xcb, 0x4a, 0x68, 0xc7, 0xbc, 0x87, 0xf1, 0x97,
	0x28, 0x78, 0x36, 0x55, 0x22, 0xe1, 0x90, 0x39, 0xcf, 0x05, 0x55, 0x2a, 0xb1, 0x14, 0x39, 0x5b,
	0xcd, 0x0b, 0x8b, 0xd0, 0x86, 0x61, 0xb9, 0x63, 0xc7, 0x3d, 0x6e, 0xb9, 0xa9, 0x28, 0x61, 0xe5,
	0xdd, 0x71, 0x1d, 0x03, 0x7f, 0x8e, 0xfc, 0x31, 0x65, 0xda, 0x25, 0x28, 0x8c, 0xdf, 0xad, 0x0d,
	0x39, 0xbd, 0xa7, 0x2a, 0xa6, 0x39, 0x75, 0x38, 0x1e, 0xa0, 0x80, 0xf2, 0x8c, 0xa9, 0xdf, 0x20,
	0x10, 0x61, 0x8c, 0x6a, 0x43, 0x02, 0x05, 0x15, 0xda, 0x20, 0x78, 0x88, 0xba, 0x57, 0x7c, 0xc5,
	0x13, 0xcd, 0x53, 0x78, 0xd3, 0x77, 0x83, 0x37, 0x35, 0x7a, 0x8f, 0xc2, 0x2a, 0x4c, 0x9b, 0x67,
	0xd9, 0xae, 0xc2, 0x14, 0x7f, 0x8a, 0x8e, 0xe0, 0x36, 0x7a, 0xa0, 0xee, 0xd6, 0x86, 0x1c, 0xc1,
	0x45, 0x40, 0x35, 0x26, 0x2f, 0x5f, 0xf5, 0x0f, 0x6e, 0x5e, 0xf5, 0x0f, 0x5e, 0xde, 0xf6, 0xbd,
	0x9b, 0xdb, 0xbe, 0xf7, 0xf7, 0x6d, 0xdf, 0xfb, 0xf3, 0x9f, 0xfe, 0xc1, 0x2f, 0x7e, 0x26, 0x53,
	0xbe, 0x5a, 0x04, 0xb0, 0xfe, 0x1f, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x30, 0xd8, 0x92, 0x23,
	0x4f, 0x06, 0x00, 0x00,
}
